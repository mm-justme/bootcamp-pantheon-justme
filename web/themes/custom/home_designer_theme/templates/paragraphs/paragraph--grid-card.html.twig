{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set classes = [
  'paragraph',
  'paragrapfield_titleh--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}


{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="flex flex-col gap-5 items-stretch mb-10 md:flex-row">
      {% block content %}
        <div class="flex-1 my-auto text-start">
          <div class="text-[36px] lg:text-[40px] font-family-GD text-theme-green tracking-[-1px] leading-[1.1]">{{ content.field_title }}</div>

          <div class="text-theme-gray text-[17px] md:text-[14px] lg:text-[17px] mt-2 mb-7 leading-[1.6]">
            {{ content.field_subtitle }}</div>
          <div class="text-theme-gold text-[14px] md:text-[12px] lg:text-[14px] uppercase leading-[1.2] tracking-[1px] font-medium">
            {{ content.field_book_link }}</div>
        </div>

          <div class="flex-1 bg-cover bg-center min-h-[500px] md:min-h-[200px] lg:min-h-[250px]"
               style="background-image:url('{{ file_url(content.field_background_image[0]['#item'].entity.uri.value) }}')">
          </div>
          <div class="flex-1 bg-cover bg-center min-h-[500px] md:min-h-[200px] lg:min-h-[250px]"
               style="background-image:url('{{ file_url(content.field_person_img[0]['#item'].entity.uri.value) }}')">
          </div>

        {{ content|without('field_title','field_subtitle','field_book_link',
          'field_position', 'field_background_image', 'field_person_img') }}
      {% endblock %}
    </div>

  </div>

{% endblock paragraph %}
